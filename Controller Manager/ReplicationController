ReplicationController 

• Replication Controller is one of the key features of Kubernetes, which is responsible for managing the pod lifecycle.
• It is responsible for making sure that the specified number of pod replicas are running at any point of time.
• A Replication Controller is a structure that enables you to easily create multiple pods, then make sure that that number of pods always exists.
• If a pod does crash, the Replication Controller replaces it.
• Replication Controllers and PODS are associated with labels.
• Creating “RC” with count of 1 ensure that a POD is always available.

ReplicationController -> "rc"  and as a shortcut in kubectl commands.

If there are too many pods, the ReplicationController terminates the extra pods. If there are too few, the ReplicationController starts more pods. 
Unlike manually created pods, the pods maintained by a ReplicationController are automatically replaced if they fail, are deleted, or are terminated.
 For example, your pods are re-created on a node after disruptive maintenance such as a kernel upgrade. 
 For this reason, you should use a ReplicationController even if your application requires only a single pod. 
 A ReplicationController is similar to a process supervisor, but instead of supervising individual processes on a single node, the ReplicationController supervises multiple pods across multiple nodes.


A simple case is to create one ReplicationController object to reliably run one instance of a Pod indefinitely. A more complex use case is to run several identical replicas of a replicated service, such as web servers




simple rc.yml 
...
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-rc
spec:
  replicas: 2
  selector:
    app: nginx
  template:
    metadata:
      name: nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

...